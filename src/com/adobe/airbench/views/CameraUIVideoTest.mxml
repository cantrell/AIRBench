<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:components="com.adobe.airbench.components.*"
		title="CameraUI Video"
		viewActivate="onViewActivate();"
		viewDeactivate="onViewDeactivate();">
	<fx:Script>
		<![CDATA[
			import com.adobe.airbench.model.ModelLocator;
			
			private const CAMERA_UI_VIDEO:String = "camera_ui_video";
			private var ml:ModelLocator;
			
			private function onViewActivate():void
			{
				this.ml = ModelLocator.getInstance();
				this.testCameraUI();
			}
			
			private function onViewDeactivate():void
			{
			}
			
			private function testCameraUI():void
			{
				if (!CameraUI.isSupported)
				{
					this.launchButton.enabled = false;
					this.ml.testManager.reportCapabilitiesTestResults(CAMERA_UI_VIDEO, false, "CameraUI.isSupported returns false.");
					this.navBar.testComplete(false, "Camera UI unsupported");
					return;
				}
				this.launchButton.enabled = true;
			}
			
			private function onLaunchCameraUI(e:Event):void
			{
				var cameraUI:CameraUI = new CameraUI();
				cameraUI.addEventListener(MediaEvent.COMPLETE, onCameraUIComplete);
				cameraUI.addEventListener(Event.CANCEL, onCameraUICanceled);
				cameraUI.addEventListener(ErrorEvent.ERROR, onError);
				cameraUI.launch(MediaType.VIDEO);
			}
			
			private function onCameraUIComplete(e:MediaEvent):void
			{
				var cameraUI:CameraUI = e.target as CameraUI;
				cameraUI.removeEventListener(MediaEvent.COMPLETE, onCameraUIComplete);
				cameraUI.removeEventListener(Event.CANCEL, onCameraUICanceled);
				cameraUI.removeEventListener(ErrorEvent.ERROR, onError);
				if (!e.data || !e.data.file || e.data.file.size == 0)
				{
					this.ml.testManager.reportCapabilitiesTestResults(CAMERA_UI_VIDEO, false, "Empty video file.");
					this.navBar.testComplete(false, "Video file empty");
					return;
				}
				var videoFile:File = e.data.file;
				this.videoFileSize.text = String(videoFile.size) + " bytes recorded.";
				this.ml.testManager.reportCapabilitiesTestResults(CAMERA_UI_VIDEO, true, "The Camera UI works for taking video.");
				this.navBar.testComplete(true, "Video works!");
			}
			
			private function onCameraUICanceled(e:Event):void
			{
				var cameraUI:CameraUI = e.target as CameraUI;
				cameraUI.removeEventListener(MediaEvent.COMPLETE, onCameraUIComplete);
				cameraUI.removeEventListener(Event.CANCEL, onCameraUICanceled);
				cameraUI.removeEventListener(ErrorEvent.ERROR, onError);
				this.ml.testManager.reportCapabilitiesTestResults(CAMERA_UI_VIDEO, false, "Video capture canceled.");
				this.navBar.testComplete(false, "Video canceled");
				
			}
			
			private function onError(e:ErrorEvent):void
			{
				var cameraUI:CameraUI = e.target as CameraUI;
				cameraUI.removeEventListener(MediaEvent.COMPLETE, onCameraUIComplete);
				cameraUI.removeEventListener(Event.CANCEL, onCameraUICanceled);
				cameraUI.removeEventListener(ErrorEvent.ERROR, onError);
				this.ml.testManager.reportCapabilitiesTestResults(CAMERA_UI_VIDEO, false, e.text);
				this.navBar.testComplete(false, "Video failed");
			}
			
		]]>
	</fx:Script>
	<s:VGroup width="100%" height="100%">
		<s:Scroller width="100%" height="100%">
			<s:VGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" gap="20">
				<s:Label text="Record some video."/>
				<s:Button id="launchButton" label="Launch Camera UI" click="onLaunchCameraUI(event)" enabled="false"/>
				<s:Label id="videoFileSize"/>
			</s:VGroup>
		</s:Scroller>
		<components:NavigationBar id="navBar" width="100%"/>
	</s:VGroup>
</s:View>
