<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:components="com.adobe.airbench.components.*"
		title="Camera UI Image"
		viewActivate="onViewActivate();"
		viewDeactivate="onViewDeactivate();">
	<fx:Script>
		<![CDATA[
			import com.adobe.airbench.model.ModelLocator;
			
			private const CAMERA_UI_IMAGE:String = "camera_ui_image";
			private const IMAGE_SIZE:uint = 400;
			private var ml:ModelLocator;
			private var tmpFile:File;
			private var mpLoader:Loader;
			
			private function onViewActivate():void
			{
				this.ml = ModelLocator.getInstance();
				this.testCameraUI();
			}

			private function onViewDeactivate():void
			{
			}
			
			private function testCameraUI():void
			{
				if (!CameraUI.isSupported)
				{
					this.launchButton.enabled = false;
					this.ml.testManager.reportCapabilitiesTestResults(CAMERA_UI_IMAGE, false, "CameraUI.isSupported returns false.");
					this.navBar.testComplete(false, "Camera UI unsupported");
					return;
				}
				this.launchButton.enabled = true;
			}

			private function onLaunchCameraUI(e:Event):void
			{
				var cameraUI:CameraUI = new CameraUI();
				cameraUI.addEventListener(MediaEvent.COMPLETE, onCameraUIComplete);
				cameraUI.addEventListener(Event.CANCEL, onCameraUICanceled);
				cameraUI.addEventListener(ErrorEvent.ERROR, onCameraError);
				cameraUI.launch(MediaType.IMAGE);
			}
			
			private function onCameraUIComplete(e:MediaEvent):void
			{
				var cameraUI:CameraUI = e.target as CameraUI;
				cameraUI.removeEventListener(MediaEvent.COMPLETE, onCameraUIComplete);
				cameraUI.removeEventListener(Event.CANCEL, onCameraUICanceled);
				cameraUI.removeEventListener(ErrorEvent.ERROR, onCameraError);
				
				var mediaPromise:MediaPromise = e.data;
				
				if (mediaPromise == null)
				{
					this.ml.testManager.reportCapabilitiesTestResults(CAMERA_UI_IMAGE, false, "MediaPromise null.");
					this.navBar.testComplete(false, "MediaPromise null");
					return;
				}
			
				this.mpLoader = new Loader();
				this.mpLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, onMediaPromiseLoaded);
				this.mpLoader.addEventListener(IOErrorEvent.IO_ERROR, onMediaPromiseLoadError);
				this.mpLoader.loadFilePromise(mediaPromise);
			}
			
			private function onMediaPromiseLoaded(e:Event):void
			{
				var mpLoaderInfo:LoaderInfo = e.target as LoaderInfo;
				mpLoaderInfo.removeEventListener(Event.COMPLETE, onMediaPromiseLoaded);
				mpLoaderInfo.loader.removeEventListener(IOErrorEvent.IO_ERROR, onMediaPromiseLoadError);
				this.imageDisplay.source = mpLoaderInfo.loader;
				this.ml.testManager.reportCapabilitiesTestResults(CAMERA_UI_IMAGE, true, "The Camera UI works for taking pictures.");
				this.navBar.testComplete(true, "Camera UI works!");
			}
			
			private function onMediaPromiseLoadError(e:IOErrorEvent):void
			{
				var mpLoader:Loader = e.target as Loader;
				mpLoader.contentLoaderInfo.removeEventListener(Event.COMPLETE, onMediaPromiseLoaded);
				this.mpLoader.removeEventListener(IOErrorEvent.IO_ERROR, onMediaPromiseLoadError);
				this.ml.testManager.reportCapabilitiesTestResults(CAMERA_UI_IMAGE, false, "IOError loading MediaPromise.");
				this.navBar.testComplete(false, "MediaPromise error");
			}
			
			private function onCameraUICanceled(e:Event):void
			{
				var cameraUI:CameraUI = e.target as CameraUI;
				cameraUI.removeEventListener(MediaEvent.COMPLETE, onCameraUIComplete);
				cameraUI.removeEventListener(Event.CANCEL, onCameraUICanceled);
				cameraUI.removeEventListener(ErrorEvent.ERROR, onCameraError);
				this.ml.testManager.reportCapabilitiesTestResults(CAMERA_UI_IMAGE, false, "CameraUI canceled.");
				this.navBar.testComplete(false, "CameraUI canceled");
			}

			private function onCameraError(e:ErrorEvent):void
			{
				var cameraUI:CameraUI = e.target as CameraUI;
				cameraUI.removeEventListener(MediaEvent.COMPLETE, onCameraUIComplete);
				cameraUI.removeEventListener(Event.CANCEL, onCameraUICanceled);
				cameraUI.removeEventListener(ErrorEvent.ERROR, onCameraError);
				this.ml.testManager.reportCapabilitiesTestResults(CAMERA_UI_IMAGE, false, e.text);
				this.navBar.testComplete(false, "CameraUI error");
			}
		]]>
	</fx:Script>
	<s:VGroup width="100%" height="100%">
		<s:Scroller width="100%" height="100%">
			<s:VGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center" gap="20">
				<s:Image id="imageDisplay" width="400" height="400"/>
				<s:Label text="Try taking a picture."/>
				<s:Button id="launchButton" label="Launch Camera UI" click="onLaunchCameraUI(event)" enabled="false"/>
			</s:VGroup>
		</s:Scroller>
		<components:NavigationBar id="navBar" width="100%"/>
	</s:VGroup>
</s:View>
