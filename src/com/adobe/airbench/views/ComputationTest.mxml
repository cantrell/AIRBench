<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:components="com.adobe.airbench.components.*"
		title="Computation"
		viewActivate="onViewActivate();"
		viewDeactivate="onViewDeactivate();">
	
	<fx:Script>
		<![CDATA[
			import com.adobe.airbench.model.ModelLocator;
			import com.adobe.airbench.util.SolarCalculator;
			
			import mx.utils.SHA256;
			
			private const COMPUTATION_SHA256:String      = "computation_sha256";
			private const COMPUTATION_SOLAR_CALC:String  = "computation_solar_calc";
			private var ml:ModelLocator;
			private const CITIES:Array = [{"lat":37.330804,          "lng":-121.893826,         "utcOffset":-8},  // Adobe San Jose
										  {"lat":47.647949473708856, "lng":-122.34853506088257, "utcOffset":-8},  // Adobe Seattle
										  {"lat":37.770573,          "lng":-122.401645,         "utcOffset":-8},  // Adobe San Francisco
										  {"lat":42.385887,          "lng":-71.263561,          "utcOffset":-5},  // Adobe Boston
										  {"lat":40.752321,          "lng":-73.982692,          "utcOffset":-5},  // Adobe NY
										  {"lat":40.324005,          "lng":-111.68272,          "utcOffset":-7},  // Adobe Utah
										  {"lat":38.928601,          "lng":-77.215712,          "utcOffset":-5},  // Adobe D.C.
										  {"lat":43.64507,           "lng":-79.522058,          "utcOffset":-5},  // Adobe Toronto
										  {"lat":45.402449,          "lng":-75.710488,          "utcOffset":-5},  // Adobe Ottawa
										  {"lat":37.42267078431052,  "lng":-122.08509922027588, "utcOffset":-8}]; // Googleplex
			private const CITY_ITERATIONS:uint = 50;
			
			private function onViewActivate():void
			{
				this.ml = ModelLocator.getInstance();

				// 1. SHA256
				
				var f:File = File.applicationDirectory.resolvePath("test_assets/test_image.jpg");
				var fs:FileStream = new FileStream();
				fs.open(f, FileMode.READ);
				var ba:ByteArray = new ByteArray();
				fs.readBytes(ba);
				this.description.text = this.description.text.replace("$1", (String(Math.round(ba.length / 1024)) + " KB")); 
				this.description.text = this.description.text.replace("$2", String(CITIES.length)); 
				this.description.text = this.description.text.replace("$3", String(CITY_ITERATIONS)); 
				
				var startTime:Number = new Date().time;
				var hash:String = SHA256.computeDigest(ba);
				var totalTimeSHA256:Number = new Date().time - startTime;
				this.ml.testManager.reportPerformanceTestResults(COMPUTATION_SHA256, totalTimeSHA256, "Computation took " + String(totalTimeSHA256) + " ms.");
				this.outputSHA256.text = "Total hash time: " + String(totalTimeSHA256) + " ms";
				
				
				// 2. Sunrise/Sunset
				
				startTime = new Date().time;
				for (var i:uint = 0; i < CITY_ITERATIONS; ++i)
				{
					for each (var city:Object in CITIES)
					{
						var sunData:Object = SolarCalculator.getSunData(city.lat, city.lng, 2, 25, 2008, city.utcOffset);
					}
				}
				var totalTimeSunriseSunset:Number = new Date().time - startTime;
				this.ml.testManager.reportPerformanceTestResults(COMPUTATION_SOLAR_CALC, totalTimeSunriseSunset, "Computation took " + String(totalTimeSunriseSunset) + " ms.");
				this.outputSunriseSunset.text = "Total sunrise/sunset time: " + String(totalTimeSunriseSunset) + " ms";

				this.navBar.testComplete(true, "Test Complete");
			}
			
			private function onViewDeactivate():void
			{
			}

			
		]]>
	</fx:Script>
	<s:VGroup width="100%" height="100%">
		<s:Scroller width="100%" height="100%">
			<s:VGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" gap="20">
				<components:MultiLineLabel id="description" text="This test measures now long it takes to calculate a SHA256 hash on a $1 image, and to calculate sunrise and sunset times for $2 cities, $3 times."/>
				<s:Label id="outputSHA256" fontWeight="bold"/>
				<s:Label id="outputSunriseSunset" fontWeight="bold"/>
			</s:VGroup>
		</s:Scroller>
		<components:NavigationBar id="navBar" width="100%"/>
	</s:VGroup>
</s:View>