<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:components="com.adobe.airbench.components.*"
		title="Rendering"
		viewActivate="onViewActivate();"
		viewDeactivate="onViewDeactivate();">
	
	<fx:Script>
		<![CDATA[
			import com.adobe.airbench.model.ModelLocator;
			
			import mx.core.UIComponent;
			
			private const RENDERING:String = "rendering";
			private var ml:ModelLocator;
			private var square:Sprite;
			private var scaleFactor:Number;
			private var frameCount:uint;
			private var startTime:Number;
			private var defaultFrameRate:uint;
			private const TARGET_FPS:uint = 60;
			private var frTestCnt:int = 0;
			
			private function onViewActivate():void
			{
				this.ml = ModelLocator.getInstance();

				this.defaultFrameRate = this.stage.frameRate;				
				this.stage.frameRate = TARGET_FPS;
				
				this.square = new Sprite();
				this.square.graphics.beginFill(0xff0000);
				this.square.graphics.drawRect(-100, -100, 200, 200);
				this.square.graphics.endFill();
				//this.square.cacheAsBitmap = true;
				//this.square.cacheAsBitmapMatrix = new Matrix();
				var uic:UIComponent = new UIComponent();
				uic.x = 100;
				uic.y = 100;
				uic.addChild(square);
				this.squareSpace.addElement(uic);
				
				this.frameCount = 0;
				this.addEventListener(Event.ENTER_FRAME, onEnterFrame);
				this.startTime = getTimer();
			}
			
			private function onViewDeactivate():void
			{
				this.squareSpace.removeAllElements();
				this.stage.frameRate = this.defaultFrameRate;
				this.removeEventListener(Event.ENTER_FRAME, onEnterFrame);
			}
			
			private function onEnterFrame(e:Event):void
			{
				this.onTick();
				if ((getTimer() - this.startTime) >= 1000)
				{
					this.startTime = getTimer();
					if (frTestCnt == 5)
					{
						var fpsPercent:uint = Math.round((this.frameCount / TARGET_FPS) * 100);
						this.fpsOutput.text = String(this.frameCount) + " FPS";
						this.percentOutput.text = String(fpsPercent) + "% target FPS";
						var framesDropped:uint = TARGET_FPS - this.frameCount;
						var plural:String = (framesDropped != 1) ? "s" : "";
						this.droppedOutput.text = String(framesDropped) + " frame" + plural + " dropped";
						this.ml.testManager.reportPerformanceTestResults(RENDERING, framesDropped, "Rendering occurred at " + String(this.frameCount) + " FPS ("+fpsPercent+")%.");
						this.navBar.testComplete(true, String(fpsPercent) + "% target FPS");
						++this.frTestCnt;
					}
					else
					{
						++this.frTestCnt;
					}
					this.frameCount = 0;
					return;
				}
				++this.frameCount;
			}

			private function onTick():void
			{
				if (this.square.scaleX <= 0.09)
				{
					this.scaleFactor = 1.01
				}
				if (this.square.scaleX >=1)
				{
					this.scaleFactor = .99;
				}
				this.square.rotation += 3;
				this.square.scaleX *= scaleFactor;
				this.square.scaleY *= scaleFactor;
				this.square.alpha = this.square.scaleX;
			}
			
		]]>
	</fx:Script>
	<s:VGroup width="100%" height="100%">
		<s:Scroller width="100%" height="100%">
			<s:VGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" gap="20">
				<components:MultiLineLabel id="description" text="This test measures your rendering framerate without hardware acceleration."/>
				<s:Group id="squareSpace" width="200" height="200"/>
				<s:Label id="fpsOutput" fontWeight="bold"/>
				<s:Label id="percentOutput" fontWeight="bold"/>
				<s:Label id="droppedOutput" fontWeight="bold"/>
			</s:VGroup>
		</s:Scroller>
		<components:NavigationBar id="navBar" width="100%"/>
	</s:VGroup>
</s:View>