<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:components="com.adobe.airbench.components.*"
		title="Results" viewActivate="onViewActivate();">
	
	<fx:Script>
		<![CDATA[
			import com.adobe.airbench.model.DeviceConfig;
			import com.adobe.airbench.model.ModelLocator;
			import com.adobe.airbench.navigation.NavigationInfo;
			import com.adobe.airbench.tests.CapabilityTest;
			import com.adobe.airbench.tests.PerformanceTest;
			import com.adobe.airbench.tests.Test;
			import com.adobe.airbench.tests.TestManager;
			
			import mx.collections.ArrayCollection;
			
			import spark.events.IndexChangeEvent;
			
			[Bindable] [Embed(source="assets/perf_test_icon.png")]    public var PerfTestIconClass:Class;
			[Bindable] [Embed(source="assets/test_failed_icon.png")]  public var TestFailedIconClass:Class;
			[Bindable] [Embed(source="assets/test_passed_icon.png")]  public var TestPassedIconClass:Class;
			[Bindable] [Embed(source="assets/test_not_run_icon.png")] public var TestNotRunIconClass:Class;
			
			[Bindable] [Embed(source="assets/progress_circle.swf",symbol="progressCircle")] private var ProgressCircle:Class;

			private var ml:ModelLocator;
			
			private function onViewActivate():void
			{
				this.ml = ModelLocator.getInstance();
				var testManager:TestManager = ml.testManager;
				var testData:Vector.<Test> = testManager.getTests();
				var capabilityTestData:Array = new Array();
				var performanceTestData:Array = new Array();
				var submittable:Boolean = false;
				var totalCapabilityTests:uint = 0;
				var passedCapabilityTests:uint = 0;
				var totalPerformanceScore:uint = 0;
				for each (var test:Test in testData)
				{
					if (test is CapabilityTest)
					{
						capabilityTestData.push(test);
						++totalCapabilityTests;
						if (CapabilityTest(test).passed) ++passedCapabilityTests;
					}
					else
					{
						performanceTestData.push(test);
						if (!isNaN(PerformanceTest(test).value)) totalPerformanceScore += PerformanceTest(test).value;
					}
					if (test.complete && !submittable) submittable = true;
				}
				var allTestData:Array = capabilityTestData.concat(performanceTestData);
				resultsList.dataProvider = new ArrayCollection(allTestData);
				this.submitButton.enabled = submittable;
				this.capabilityScore.text = String(passedCapabilityTests) + " / " + String(totalCapabilityTests);
				this.performanceScore.text = String(totalPerformanceScore) + " (low is good)";
				this.testSuiteVersion.text = testManager.getTestSuiteVersion();
			}
			
			private function onTestSelected(e:IndexChangeEvent):void
			{
				var list:List = e.target as List;
				var selectedTest:Test = list.selectedItem as Test;
				var navInfo:NavigationInfo = ModelLocator.getInstance().navigationManager.getNavigationInfo(selectedTest.viewClassName);
				this.navigator.pushView(navInfo.thisView);
			}
						
			private function onSubmitResults():void
			{
				this.submitButtonSubmitting();
				
				var vars:URLVariables = new URLVariables();

				vars[DeviceConfig.UUID] = this.ml.uuid;

				var deviceConfig:DeviceConfig = new DeviceConfig();

				var f:File = new File("/system/build.prop");
				//var f:File = File.desktopDirectory.resolvePath("build.prop");
				if (f.exists)  // Android
				{
					var fs:FileStream = new FileStream();
					fs.open(f, FileMode.READ);
					var fileBytes:ByteArray = new ByteArray();
					fs.readBytes(fileBytes);
					var props:String = new String(fileBytes);
					var propsArray:Array = props.split("\n");
					for each (var prop:String in propsArray)
					{
						if (prop.indexOf("net.bt.name=")              == 0) {deviceConfig.properties[DeviceConfig.OS_NAME]          = prop.split("=")[1]; continue;} 
						if (prop.indexOf("ro.build.display.id=")      == 0) {deviceConfig.properties[DeviceConfig.OS_BUILD]         = prop.split("=")[1]; continue;} 
						if (prop.indexOf("ro.build.version.sdk=")     == 0) {deviceConfig.properties[DeviceConfig.OS_SDK_VERSION]   = prop.split("=")[1]; continue;}
						if (prop.indexOf("ro.build.version.release=") == 0) {deviceConfig.properties[DeviceConfig.OS_VERSION]       = prop.split("=")[1]; continue;}
						if (prop.indexOf("ro.product.model=")         == 0) {deviceConfig.properties[DeviceConfig.MODEL]            = prop.split("=")[1]; continue;}
						if (prop.indexOf("ro.product.brand=")         == 0) {deviceConfig.properties[DeviceConfig.BRAND]            = prop.split("=")[1]; continue;}
						if (prop.indexOf("ro.product.name=")          == 0) {deviceConfig.properties[DeviceConfig.NAME]             = prop.split("=")[1]; continue;}
						if (prop.indexOf("ro.product.cpu.abi=")       == 0) {deviceConfig.properties[DeviceConfig.CPU]              = prop.split("=")[1]; continue;}
						if (prop.indexOf("ro.product.manufacturer=")  == 0) {deviceConfig.properties[DeviceConfig.MANUFACTURER]     = prop.split("=")[1]; continue;}
						if (prop.indexOf("ro.opengles.version=")      == 0) {deviceConfig.properties[DeviceConfig.OPENGLES_VERSION] = prop.split("=")[1]; continue;}
					}
				}
				else
				{
					// Not Android. Default to Capabilities for now. Hopefully we'll have better APIs in the future.
					deviceConfig.properties[DeviceConfig.OS_NAME]      = Capabilities.os;
					deviceConfig.properties[DeviceConfig.MANUFACTURER] = Capabilities.manufacturer;
					deviceConfig.properties[DeviceConfig.OS_VERSION]   = Capabilities.version;
				}

				for (var propName:String in deviceConfig.properties)
				{
					vars[propName] = deviceConfig.properties[propName];
				}

				var tests:Vector.<Test> = this.ml.testManager.getTests();
				
				for each (var test:Test in tests)
				{
					if (!test.complete) continue;
					vars[test.testId]              = (test is PerformanceTest) ? PerformanceTest(test).value : CapabilityTest(test).passed;
					vars[test.testId + "_name"]    = test.displayName;
					vars[test.testId + "_version"] = test.testVersion;
				}
				
				var req:URLRequest = new URLRequest("http://airbenchmark.com/TestResults/save");
				req.method = URLRequestMethod.POST;
				req.data = vars;
				var loader:URLLoader = new URLLoader();
				loader.addEventListener(IOErrorEvent.IO_ERROR, onIOError);
				loader.addEventListener(Event.COMPLETE, onComplete);
				loader.addEventListener(HTTPStatusEvent.HTTP_RESPONSE_STATUS, onResponseStatus);
				loader.load(req);
			}
			
			private function onIOError(e:IOErrorEvent):void
			{
				this.submitButtonError();
				var loader:URLLoader = e.target as URLLoader;
				loader.removeEventListener(IOErrorEvent.IO_ERROR, onIOError);
				loader.removeEventListener(Event.COMPLETE, onComplete);
				loader.removeEventListener(HTTPStatusEvent.HTTP_RESPONSE_STATUS, onResponseStatus);
			}
			
			private function onResponseStatus(e:HTTPStatusEvent):void
			{
				if (e.status != 200)
				{
					this.submitButtonError();
					var loader:URLLoader = e.target as URLLoader;
					loader.removeEventListener(IOErrorEvent.IO_ERROR, onIOError);
					loader.removeEventListener(Event.COMPLETE, onComplete);
					loader.removeEventListener(HTTPStatusEvent.HTTP_RESPONSE_STATUS, onResponseStatus);
				}
			}
			
			private function onComplete(e:Event):void
			{
				var loader:URLLoader = e.target as URLLoader;
				loader.removeEventListener(IOErrorEvent.IO_ERROR, onIOError);
				loader.removeEventListener(Event.COMPLETE, onComplete);
				loader.removeEventListener(HTTPStatusEvent.HTTP_RESPONSE_STATUS, onResponseStatus);
				this.submitButtonSuccess();
			}
			
			private function submitButtonSubmitting():void
			{
				this.submitButton.enabled = false;
				this.submitButton.icon = this.ProgressCircle;
				this.submitButton.label = "Submitting...";
			}
			
			private function submitButtonError():void
			{
				this.submitButton.enabled = true;
				this.submitButton.icon = TestFailedIconClass;
				this.submitButton.label = "Error. Please try again.";
			}
			
			private function submitButtonSuccess():void
			{
				this.submitButton.enabled = false;
				this.submitButton.icon = TestPassedIconClass;
				this.submitButton.label = "Results Submitted!";
			}

		]]>
	</fx:Script>
	
	<s:VGroup width="100%" height="100%" horizontalAlign="center" paddingBottom="6">
		<s:HGroup width="100%" paddingTop="11">
			<s:VGroup width="50%" horizontalAlign="right" verticalAlign="middle">
				<s:Label text="Capability Score:"/>
				<s:Label text="Performance Score:"/>
				<s:Label text="Test Suite Version:"/>
			</s:VGroup>
			<s:VGroup width="50%" horizontalAlign="left" verticalAlign="middle">
				<s:Label id="capabilityScore"/>
				<s:Label id="performanceScore"/>
				<s:Label id="testSuiteVersion"/>
			</s:VGroup>
		</s:HGroup>
		<s:List id="resultsList" width="100%" height="100%" change="onTestSelected(event);">
			<s:itemRenderer>
				<fx:Component>
					<s:MobileIconItemRenderer labelFunction="getLabel" messageFunction="getMessage" iconFunction="getIcon">
						<fx:Script>
							<![CDATA[
								import com.adobe.airbench.model.ModelLocator;
								import com.adobe.airbench.tests.PerformanceTest;
								private function getLabel(item:Object):String
								{
									return item.displayName;
								}

								private function getMessage(item:Object):String
								{
									if (!item.complete)
									{
										return "Test hasn't been run.";
									}
									return item.message;
								}
								
								private function getIcon(item:Object):Class
								{
									if (!item.complete)
									{
										return outerDocument.TestNotRunIconClass;
									}
									if (item is PerformanceTest)
									{
										return outerDocument.PerfTestIconClass;
									}
									if (item.passed)
									{
										return outerDocument.TestPassedIconClass;
									}
									return outerDocument.TestFailedIconClass;
								}
							]]>
						</fx:Script>
					</s:MobileIconItemRenderer>
				</fx:Component>
			</s:itemRenderer>
		</s:List>
		<s:Button id="submitButton" label="Submit Results" click="onSubmitResults();" enabled="false"/>
	</s:VGroup>
	
	<!--<components:NavigationBar left="0" right="0" bottom="0" showStatusTest="false"/>-->

</s:View>
